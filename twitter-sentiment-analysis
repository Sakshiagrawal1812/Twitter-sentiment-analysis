import tweepy
from textblob import TextBlob
import sys
import matplotlib as plt
consumer_key =' '
consumer_secret = " "
access_token =" "
access_secret = " "
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_secret)
api = tweepy.API(auth)
searchTerm = input("Enter Keyword/Tag to search about: ")
NoOfTerms = int(input("Enter how many tweets to search: "))
tweets = tweepy.Cursor(api.search, q=searchTerm).items(NoOfTerms)
for tweet in tweets:
    print (tweet.text)   #print tweet's text\n",
    analysis = TextBlob(tweet.text)
    print(analysis.sentiment)    #print tweet's polarity\n",
    #non_bmp_map = dict.fromkeys(range(0x10000, sys.maxunicode + 1), 0xfffd)
    for tweet in tweets:
       print (tweet.text.translate(non_bmp_map))    #print tweet's text\n",
       analysis = TextBlob(tweet.text)
       print(analysis.sentiment)    #print tweet's polarity\n",
       def cleanTweet(self, tweet):
            # Remove Links, Special Characters etc from tweet\n",
            #return ' '.join(re.sub("(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t]) | (\\w +:\\ / \\ / \\S +) tweet).split())
            return 0
def percentage(part,whole):
    return 100* float(part)/float(whole)
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_secret)
api = tweepy.API(auth)
searchTerm = input("Enter Keyword/Tag to search about: ")
NoOfTerms = int(input("Enter how many tweets to search: "))
tweets = tweepy.Cursor(api.search, q=searchTerm).items(NoOfTerms)
positive =0
negative =0
neutral =0
polarity =0
for tweet in tweets:
      # print (tweet.text)   #print tweet's text\n",
    analysis = TextBlob(tweet.text)
    polarity+=analysis.sentiment.polarity
    if(analysis.sentiment.polarity ==0):
        neutral+=1
    elif(analysis.sentiment.polarity >0.00):
        positive+=1
    elif(analysis.sentiment.polarity <0.00):
        negative+=1
positive = percentage(positive,NoOfTerms)
negative = percentage(negative,NoOfTerms)
neutral = percentage(neutral,NoOfTerms)
positive =format(positive,'.2f')
negative =format(negative,'.2f')
neutral =format(neutral,'.2f')
labels =['Positive ['+ str(positive)+ '%]','Neutral ['+ str(neutral)+ '%]','Negative ['+ str(negative)+ '%]']
sizes= [positive,neutral,negative]
colors =['yellowgreen','gold','red']
patches, texts=plt.pie(sizes,colors=colors,startangle=90)
plt.legend(patches,labels,loc="best")
plt.title("graph")
plt.axis('equal')
plt.tight_layout()
plt.show()
